{
  "name": "saml2-js",
  "version": "1.0.2",
  "description": "SAML 2.0 node helpers",
  "author": {
    "name": "Clever"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.10.x"
  },
  "scripts": {
    "test": "make -Br test",
    "test-cov": "make -Br test-cov",
    "prepublish": "make build"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Clever/saml2.git"
  },
  "keywords": [
    "saml",
    "node"
  ],
  "bugs": {
    "url": "https://github.com/Clever/saml2/issues"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "coffee-script": "~1.7.1"
  },
  "dependencies": {
    "async": "~0.2.10",
    "async-ext": "~0.1.4",
    "debug": "^1.0.4",
    "underscore": "~1.6.0",
    "xml-crypto": "0.0.22",
    "xml-encryption": "~0.7.0",
    "xml2js": "~0.4.1",
    "xmlbuilder": "~2.1.0",
    "xmldom": "~0.1.19"
  },
  "readme": "# SAML2-js\n\n[![Build Status](https://ci.ops.clever.com/api/badge/github.com/Clever/saml2/status.svg?branch=master)](https://ci.ops.clever.com/github.com/Clever/saml2)\n\n`saml2-js` is a node module that abstracts away the complexities of the SAML protocol behind an easy to use interface.\n\n## Usage\n\nInstall with [npm](https://www.npmjs.com/).\n\n```bash\n  npm install saml2-js --save\n```\n\nInclude the SAML library.\n\n```javascript\n  var saml2 = require('saml2-js');\n```\n\n## Documentation\n\nThis library exports two constructors.\n\n- [`ServiceProvider`](#ServiceProvider) - Represents a service provider that relies on a trusted [`IdentityProvider`](#IdentityProvider) for authentication and authorization in the SAML flow.\n- [`IdentityProvider`](#IdentityProvider) - Represents an online service that authenticates users in the SAML flow.\n\n<a name=\"note_options\" />\n**Note:**  Some options can be set on the [SP](#ServiceProvider), [IdP](#IdentityProvider), and/or on a per-method basis. For the options that are set in multiple places, they are overridden in the following order: per-method basis *overrides* [IdP](#IdentityProvider) which *overrides* [SP](#ServiceProvider).\n\n<a name=\"ServiceProvider\" />\n### ServiceProvider(options)\nRepresents a service provider that relies on a trusted [`IdentityProvider`](#IdentityProvider) for authentication and authorization in the SAML flow.\n\n#### Options\nAn object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n\n- `entity_id` - **Required** - Unique identifier for the service provider, often the URL of the metadata file.\n- `private_key` - **Required** - (PEM format string) - Private key for the service provider.\n- `certificate` - **Required** - (PEM format string) - Certificate for the service provider.\n- `assert_endpoint` - **Required** - URL of service provider assert endpoint.\n- `force_authn` - (Boolean) - If true, forces re-authentication of users even if the user has a SSO session with the [IdP](#IdentityProvider).  This can also be configured on the [IdP](#IdentityProvider) or on a per-method basis.\n- `auth_context` - Specifies `AuthnContextClassRef`.  This can also be configured on a per-method basis.\n- `nameid_format` - Format for Name ID.  This can also be configured on a per-method basis.\n- `sign_get_request` - (Boolean) - If true, signs the request.  This can also be configured on the [IdP](#IdentityProvider) or on a per-method basis.\n- `allow_unencrypted_assertion` - (Boolean) - If true, allows unencrypted assertions.  This can also be configured on the [IdP](#IdentityProvider) or on a per-method basis.\n\n#### Returns the following functions\n- [`create_login_request_url(IdP, options, cb)`](#create_login_request_url) - Get a URL to initiate a login.\n- [`redirect_assert(IdP, options, cb)`](#redirect_assert) - Gets a SAML response object if the login attempt is valid, used for redirect binding.\n- [`post_assert(IdP, options, cb)`](#post_assert) - Gets a SAML response object if the login attempt is valid, used for post binding.\n- [`create_logout_request_url(IdP, options, cb)`](#create_logout_request_url)- Creates a SAML Request URL to initiate a user logout.\n- [`create_logout_response_url(IdP, options, cb)`](#create_logout_response_url) - Creates a SAML Response URL to confirm a successful [IdP](#IdentityProvider) initiated logout.\n- [`create_metadata()`](#create_metadata) - Returns the XML metadata used during the initial SAML configuration.\n\n#### Example\n```javascript\n\n  var sp_options = {\n    entity_id: \"https://sp.example.com/metadata.xml\",\n    private_key: fs.readFileSync(\"key-file.pem\").toString(),\n    certificate: fs.readFileSync(\"cert-file.crt\").toString(),\n    assert_endpoint: \"https://sp.example.com/assert\",\n    force_authn: true,\n    auth_context: { comparison: \"exact\", class_refs: [\"urn:oasis:names:tc:SAML:1.0:am:password\"] },\n    nameid_format: \"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\",\n    sign_get_request: false,\n    allow_unencrypted_assertion: true\n  }\n\n  // Call service provider constructor with options\n  var sp = new saml2.ServiceProvider(sp_options);\n\n  // Example use of service provider.\n  // Call metadata to get XML metatadata used in configuration.\n  var metadata = sp.create_metadata();\n\n```\n\n#### Service provider function definitions\n\n<a name=\"create_login_request_url\" />\n##### create_login_request_url(IdP, options, cb)\nGet a URL to initiate a login.\n\nTakes the following arguments:\n- `IdP` - [IdP](#IdentityProvider)\n- `options` - An object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n  - `relay_state` - SAML relay state.\n  - `auth_context` - Specifies `AuthnContextClassRef`.  This can also be configured on the [SP](#ServiceProvider).\n  - `nameid_format` - Format for Name ID.  This can also be configured on the [SP](#ServiceProvider).\n  - `force_authn`- (Boolean) - If true, forces re-authentication of users even if the user has a SSO session with the [IdP](#IdentityProvider).  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n  - `sign_get_request` - (Boolean) - If true, signs the request.  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n- `cb(error, login_url, request_id)` - Callback called with the login URL and ID of the request.\n\n\n<a name=\"redirect_assert\" />\n##### redirect_assert(IdP, options, cb)\nGets a SAML response object if the login attempt is valid, used for redirect binding.\n\nTakes the following arguments:\n- `IdP` - [IdP](#IdentityProvider)\n- `options` - An object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n  - `request_body` - (Object) - An object containing the parsed query string parameters.  This object should contain the value for either a `SAMLResponse` or `SAMLRequest`.\n  - `allow_unencrypted_assertion` - (Boolean) - If true, allows unencrypted assertions.  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n- `cb(error, response)` - Callback called with the [request response](#assert_response).\n\n<a name=\"assert_response\" />\nExample of the SAML assert response returned:\n\n  ```javascript\n  { response_header:\n     { id: '_abc-1',\n       destination: 'https://sp.example.com/assert',\n       in_response_to: '_abc-2' },\n    type: 'authn_response',\n    user:\n     { name_id: 'nameid',\n       session_index: '_abc-3',\n       attributes:\n        { 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname': [ 'Test' ] } } }\n  ```\n\n<a name=\"post_assert\" />\n##### post_assert(IdP, options, cb)\nGets a SAML response object if the login attempt is valid, used for post binding.\n\nTakes the following arguments:\n- `IdP` - [IdP](#IdentityProvider)\n- `options` - An object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n  - `request_body` - (Object) - An object containing the parsed query string parameters.  This object should contain the value for either a `SAMLResponse` or `SAMLRequest`.\n  - `allow_unencrypted_assertion` - (Boolean) - If true, allows unencrypted assertions.  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n- `cb(error, response)` - Callback called with the [request response](#assert_response).\n\n\n<a name=\"create_logout_request_url\" />\n##### create_logout_request_url(IdP, options, cb)\nCreates a SAML Request URL to initiate a user logout.\n\nTakes the following arguments:\n- `IdP` - [IdP](#IdentityProvider).  Note: Can pass `sso_logout_url` instead of IdP.\n- `options` - An object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n  + `name_id` - Format for Name ID.  This can also be configured on a per-method basis.\n  + `session_index` - Session index to use for creating logout request.\n  + `allow_unencrypted_assertion` - (Boolean) - If true, allows unencrypted assertions.  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n  + `sign_get_request` - (Boolean) - If true, signs the request.  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n  + `relay_state` - SAML relay state.\n- `cb(error, request_url)` - Callback called with the logout request url.\n\n\n<a name=\"create_logout_response_url\" />\n##### create_logout_response_url(IdP, options, cb)\nCreates a SAML Response URL to confirm a successful [IdP](#IdentityProvider) initiated logout.\n\nTakes the following arguments:\n- `IdP` - [IdP](#IdentityProvider).  Note: Can pass `sso_logout_url` instead of IdP.\n- `options` - An object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n  + `in_response_to` - The ID of the request that this is in response to. Should be checked against any sent request IDs.\n  + `sign_get_request` - (Boolean) - If true, signs the request.  This can also be configured on the [IdP](#IdentityProvider) or [SP](#ServiceProvider).\n  + `relay_state` - SAML relay state.\n- `cb(error, response_url)` - Callback called with the logout response url.\n\n<a name=\"create_metadata\" />\n##### create_metadata()\nReturns the XML metadata used during the initial SAML configuration.\n\n<a name=\"IdentityProvider\" />\n### IdentityProvider(options)\nRepresents an online service that authenticates users in the SAML flow.\n\nReturns no functions, exists solely to be passed to an [SP](#ServiceProvider) function.\n\n#### Options\nAn object that can contain the below options.  All options are strings, unless specified otherwise.  See [note](#note_options) for more information on options.\n\n- `sso_login_url` - **Required** - Login url to use during a login request.\n- `sso_logout_url` - **Required** - Logout url to use during a logout request.\n- `certificates` - **Required** - (PEM format string or array of PEM format strings) - Certificate or certificates (array of certificate) for the identity provider.\n- `force_authn` - (Boolean) - If true, forces re-authentication of users even if the user has a SSO session with the [IdP](#IdentityProvider).  This can also be configured on the [SP](#ServiceProvider) or on a per-method basis.\n- `sign_get_request` - (Boolean) - If true, signs the request.  This can also be configured on the [[SP](#ServiceProvider) or on a per-method basis.\n- `allow_unencrypted_assertion` - (Boolean) - If true, allows unencrypted assertions.  This can also be configured on the [SP](#ServiceProvider) or on a per-method basis.\n\n#### Example\n```javascript\n\n  // Initialize options object\n  var idp_options = {\n    sso_login_url: \"https://idp.example.com/login\",\n    sso_logout_url: \"https://idp.example.com/logout\",\n    certificates: [fs.readFileSync(\"cert-file1.crt\").toString(), fs.readFileSync(\"cert-file2.crt\").toString()],\n    force_authn: true,\n    sign_get_request: false,\n    allow_unencrypted_assertion: false\n  };\n\n  // Call identity provider constructor with options\n  var idp = new saml2.IdentityProvider(idp_options);\n\n  // Example usage of identity provider.\n  // Pass identity provider into a service provider function with options and a callback.\n  sp.post_assert(idp, {}, callback);\n\n```\n\n\n## Example: Express implementation\n\nLibrary users will need to implement a set of URL endpoints, here is an example of [express](http://expressjs.com/) endpoints.\n\n```javascript\nvar saml2 = require('saml2-js');\nvar fs = require('fs');\nvar express = require('express');\nvar app = express();\n\n// Create service provider\nvar sp_options = {\n  entity_id: \"https://sp.example.com/metadata.xml\",\n  private_key: fs.readFileSync(\"key-file.pem\").toString(),\n  certificate: fs.readFileSync(\"cert-file.crt\").toString(),\n  assert_endpoint: \"https://sp.example.com/assert\"\n};\nvar sp = new saml2.ServiceProvider(sp_options);\n\n// Create identity provider\nvar idp_options = {\n  sso_login_url: \"https://idp.example.com/login\",\n  sso_logout_url: \"https://idp.example.com/logout\",\n  certificates: [fs.readFileSync(\"cert-file1.crt\").toString(), fs.readFileSync(\"cert-file2.crt\").toString()]\n};\nvar idp = new saml2.IdentityProvider(idp_options);\n\n// ------ Define express endpoints ------\n\n// Endpoint to retrieve metadata\napp.get(\"/metadata.xml\", function(req, res) {\n  res.type('application/xml');\n  res.send(sp.create_metadata());\n});\n\n// Starting point for login\napp.get(\"/login\", function(req, res) {\n  sp.create_login_request_url(idp, {}, function(err, login_url, request_id) {\n    if (err != null)\n      return res.send(500);\n    res.redirect(login_url);\n  });\n});\n\n// Assert endpoint for when login completes\napp.post(\"/assert\", function(req, res) {\n  var options = {request_body: req.body};\n  sp.post_assert(idp, options, function(err, saml_response) {\n    if (err != null)\n      return res.send(500);\n\n    // Save name_id and session_index for logout\n    // Note:  In practice these should be saved in the user session, not globally.\n    name_id = saml_response.user.name_id;\n    session_index = saml_response.user.session_index;\n\n    res.send(\"Hello #{saml_response.user.name_id}!\");\n  });\n});\n\n// Starting point for logout\napp.get(\"/logout\", function(req, res) {\n  var options = {\n    name_id: name_id,\n    session_index: session_index\n  };\n\n  sp.create_logout_request_url(idp, options, function(err, logout_url) {\n    if (err != null)\n      return res.send(500);\n    res.redirect(logout_url);\n  });\n});\n\napp.listen(3000);\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "saml2-js@1.0.2",
  "dist": {
    "shasum": "7649f90340a3785563b68a7dbc3b24edfd74cd47"
  },
  "_from": "saml2-js@",
  "_resolved": "https://registry.npmjs.org/saml2-js/-/saml2-js-1.0.2.tgz"
}
