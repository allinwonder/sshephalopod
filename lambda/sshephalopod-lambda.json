{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Lambda functions for sshephalopod",

  "Parameters": {
    "Bucket": {
      "Description": "The S3 bucket where the Lambda code blob is stashed",
      "Type": "String"
    },
    "CodeFile": {
      "Description": "The name of the Lambda code blob in S3",
      "Type": "String"
    },
    "IdpMetadataEndpoint": {
      "Description": "The URL of the IDP endpoint to use to retrieve the metadata XML",
      "Type": "String",
      "AllowedPattern": "^https://.*",
      "ConstraintDescription": "Must be a valid HTTPS URL"
    },
    "DNSDomain": {
      "Description": "The DNS domain that will be hosting sshephalopod",
      "Type": "String"
    },
    "CAKeyPairBucket": {
      "Description": "The name of the S3 bucket that will store the CA keypair",
      "Type": "String"
    },
    "CAKeyPairKeyname": {
      "Description": "The name of the keypair in the S3 bucket",
      "Type": "String"
    },
    "SPHostName": {
      "Description": "The name of the SP (from API gateway)",
      "Type": "String"
    }
  },

  "Resources": {
    "ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [ "sts:AssumeRole" ],
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] }
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "PermitLambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PermitWriteConsoleLogs",
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "PermitUpdateDynamo",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:UpdateItem",
                    "dynamodb:GetItem"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermitUseKeypairBucket",
                  "Effect": "Allow",
                  "Action": [
                    "s3:List*",
                    "s3:Get*",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "CAKeyPairBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "CAKeyPairBucket" }, "/*" ] ] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "APIGatewayExecRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [ "sts:AssumeRole" ],
              "Effect": "Allow",
              "Principal": { "Service": [ "apigateway.amazonaws.com" ] }
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "PermitLambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PermitInvokeLambda",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    { "Fn::GetAtt": [ "SigningPreAuth", "Arn" ] },
                    { "Fn::GetAtt": [ "GenerateMetadata", "Arn" ] },
                    { "Fn::GetAtt": [ "SigningRequestPassport", "Arn" ] }
                  ]
                },
                {
                  "Sid": "PermitLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },

    "SigningPreAuth": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "Bucket" },
          "S3Key": { "Ref": "CodeFile" }
        },
        "Description": "Run by the initial unauthenticated GET",
        "Handler": "SigningPreAuth.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "ExecutionRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },

    "GenerateMetadata": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "Bucket" },
          "S3Key": { "Ref": "CodeFile" }
        },
        "Description": "Returns the metadata of this SP",
        "Handler": "Metadata.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "ExecutionRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },

    "SigningRequestPassport": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "Bucket" },
          "S3Key": { "Ref": "CodeFile" }
        },
        "Description": "Run when a SAML Response is POSTed along with an SSH pubkey - passport-saml version",
        "Handler": "SigningRequestPassport.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "ExecutionRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "60"
      }
    },

    "SSHephalopodKeyPair": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "Bucket" },
          "S3Key": { "Ref": "CodeFile" }
        },
        "Handler": "CreateCAKeypair.handler",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "ExecutionRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },

    "CAKeyPair": {
      "Type": "Custom::GeneratedCAKeyPair",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "SSHephalopodKeyPair", "Arn" ] },
        "Bucket": { "Ref": "CAKeyPairBucket" },
        "Key": { "Ref": "CAKeyPairKeyname" },
        "MeaninglessThings": "cheese"
      }
    },

    "SSHephalopodTXT": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Comment": "DNS records for sshephalopod",
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [ { "Ref": "DNSDomain" }, "." ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [ "sshephalopod-ca-cert", ".", { "Ref": "DNSDomain" }, "." ]
          ]
        },
        "Type": "TXT",
        "TTL": "300",
        "ResourceRecords": [
          { "Fn::Join": [
            "", [
              "\"",
              { "Fn::GetAtt": [ "CAKeyPair", "PublicKey" ] },
              "\""
            ]
          ]}
        ]
      }
    },

    "SSHephalopodSRV": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Comment": "DNS records for sshephalopod",
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [ { "Ref": "DNSDomain" }, "." ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [ "_sshephalopod-ca._tcp.", { "Ref": "DNSDomain" }, "." ]
          ]
        },
        "Type": "SRV",
        "TTL": "300",
        "ResourceRecords": [
          { "Fn::Join": [
            "", [
              "0 0 443 ",
              { "Ref": "SPHostName" }
            ]
          ]}
        ]
      }
    }

  },

  "Outputs": {
    "CAPublicKey": { "Value": { "Fn::GetAtt": [ "CAKeyPair", "PublicKey" ] } },
    "GenerateMetadata": { "Value": { "Fn::GetAtt": [ "GenerateMetadata", "Arn" ] } },
    "SigningRequest": { "Value": { "Fn::GetAtt": [ "SigningRequestPassport", "Arn" ] } },
    "SigningPreAuth": { "Value": { "Fn::GetAtt": [ "SigningPreAuth", "Arn" ] } },
    "ExecutionRole": { "Value": { "Fn::GetAtt": [ "APIGatewayExecRole", "Arn" ] } },
    "KeyPairBucket": { "Value": { "Ref": "CAKeyPairBucket" } },
    "KeyPairName": { "Value": { "Ref": "CAKeyPairKeyname" } },
    "IdpMetadataEndpoint": { "Value": { "Ref": "IdpMetadataEndpoint" } }
  }
}
